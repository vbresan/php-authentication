#summary Installation instructions

= Installation instructions =

Step by step instructions:

== 1. Extract the zip file ==
== 2. Set database connection parameters ==

  PHP Authentication service uses database to store data. All most frequently used databases are supported (MySQL, PostgreSQL, SQLite). Database is not accessed directly but through EZPDO, lightweight data persistence library that comes with the product. It is not necessary for you to know anything about the mentioned library, you just need to edit the following configuration file:
    `./config.xml`
  Look for `<default_dsn>` tags and uncomment the one depending on the database type that you use. Put the right username, password and database name in connection string. Please note that the database already has to be created and user has to be given the right credentials, including the one necessary for table creation. The following MySQL statements might be helpful in that task:
    {{{
    CREATE DATABASE databasename DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX ON databasename . * TO 'username'@'localhost';
    SET PASSWORD FOR 'username'@'localhost'=PASSWORD('password');
    }}}
  Syntax might differ slightly if you are using database other than MySQL.

== 3. Call `_buildTables.php` script ==

  If you have set everything from the previous step correctly, this script will create the following tables: [DBTables#LastLogin] <a href="https://www.blogger.com/2009/06/db-tables.html#LastLogin">`LastLogin`</a>, <span style="font-family: courier new;"><a href="https://www.blogger.com/2009/06/db-tables.html#MaskedCookieData">MaskedCookieData</a></span>, <span style="font-family: courier new;"><a href="https://www.blogger.com/2009/06/db-tables.html#TempInvitation">TempInvitation</a></span>, <span style="font-family: courier new;"><a href="https://www.blogger.com/2009/06/db-tables.html#TempVerification">TempVerification</a></span> and <span style="font-family: courier new;"><a href="https://www.blogger.com/2009/06/db-tables.html#User">User</a></span>. Also in local file system, folder <span style="font-family: courier new;">compiled</span> and file <span style="font-family: courier new;">ezpdo.log</span> will be created. After you are done with this step, you can delete <span style="font-family: courier new;">_buildTables.php</span> script.</div>
<br />
<a href="https://www.blogger.com/null" name="verify.php"></a><strong>4. Customize <span style="font-family: courier new;">verify.php</span> file</strong><br />
<div style="padding-left: 30px;">
Link to this file is sent to user via e-mail upon registration as a request for account verification. You can customize this file and give it a desired look, just be sure to keep the <span style="font-family: courier new;">include_once</span> tag at the top and <span style="font-family: courier new;">$userMessage</span> variable wherever you want.</div>
<br />
<a href="https://www.blogger.com/null" name="properties.ini"></a><strong>5. Customize <span style="font-family: courier new;">properties.ini</span> file</strong><br />
<div style="padding-left: 30px;">
Properties file contains several sections, we'll describe each one right here.<br /><br /><br /><strong>Section <span style="font-family: courier new;">[General]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;PHP Authentication comes with multi-language support. You select your preferred language by setting the <span style="font-family: courier new;">DefaultLanguage</span> parameter. You can add your own translation (or customize existing) by modifying the <span style="font-family: courier new;">messages.php</span> file.<br /><br />Each registered user can send registration invitations to friends. Number of invitations that user can send is defined by parameter <span style="font-family: courier new;">NumberOfInvitations</span>. <br /><br />If <span style="font-family: courier new;">CheckForRegistrationCode</span> parameter is set to 1, registration code is sent along with each invitation and new users can register only by providing that code. Think of it as of 'closed' web site support - new users can register only if they are invited by existing users. If <span style="font-family: courier new;">CheckForRegistrationCode</span> is set to 0, invitations can still be sent around but they will not contain registration code, since they are not needed now.<br /><br />If <span style="font-family: courier new;">SendVerificationEMail</span> parameter is set to 1, e-mail with verification link is sent to user after his registration. User will not be able to log in until he verifies his account by opening this link. If parameter is set to 0, user's account will be verified on registration and verification mail will not be sent.<br /><br />With <span style="font-family: courier new;">MessageFormat</span> parameter you define the format of PHP Authentication's output messages. The following two formats are available: <span style="font-family: courier new;">XML</span> (default) and <span style="font-family: courier new;">JSON</span>. <br /><br /><br /><strong>Section <span style="font-family: courier new;">[UserName]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-family: courier new;">MinLength</span> and <span style="font-family: courier new;">MaxLength</span> define username minimum and maximum lengths, respectively. Maximum length can not be greater than 64 and username must be alphanumeric string. If <span style="font-family: courier new;">AllowEMailAddress</span> is set to 1, username can have e-mail address syntax and length constraints do not apply. <br /><br /><br /><strong>Section <span style="font-family: courier new;">[VerificationMail]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;Upon registration, e-mail is sent to user containing the link for account verification. In order to verify the account, user is required to visit the link before the first login. <br /><br />Link URL is defined with the parameter <span style="font-family: courier new;">Link</span>. Enter your hostname and path to <span style="font-family: courier new;">verify.php</span> script, leave the remaining part untouched.<br /><br />Parameter <span style="font-family: courier new;">MailSubject</span> defines the subject of verification request e-mail, while parameters <span style="font-family: courier new;">MailBodyFile</span> and <span style="font-family: courier new;">MailHeadersFile</span> define paths to mail body and mail headers templates respectively. Customize templates as you wish, just don't forget to leave <span style="font-family: courier new;">{$link}</span> string inside the mail body.<br /><br /><br /><strong>Section <span style="font-family: courier new;">[LoginDataMail]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;In case user forgets his username or password, he can make a request for forgotten credentials. Username and new password will be sent via e-mail to address that he used when he registered his account.<br /><br />Parameter <span style="font-family: courier new;">MailSubject</span> defines the subject of e-mail, while parameters <span style="font-family: courier new;">MailBodyFile</span> and <span style="font-family: courier new;">MailHeadersFile</span> define paths to mail body and mail headers templates respectively. Customize templates as you wish, just don't forget to leave <span style="font-family: courier new;">{$userName}</span> and <span style="font-family: courier new;">{$password}</span> strings inside the mail body.<br /><br /><br /><strong>Section <span style="font-family: courier new;">[InvitationMail]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;This section defines the look of invitation mail.<br /><br />Parameter <span style="font-family: courier new;">MailSubject</span> defines the subject of e-mail which will contain inviter's name if the <span style="font-family: courier new;">{$name}</span> string is included. Parameter <span style="font-family: courier new;">MailBodyTailFile</span> defines the tail that will be appended to custom message that is inviter sending. If registration codes are used, this tail should contain <span style="font-family: courier new;">{$registrationCode}</span> string. Finally, parameter <span style="font-family: courier new;">MailHeadersFile</span> defines path to mail headers template file. <br /><br /><br /><strong>Section <span style="font-family: courier new;">[DaysToExpire]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;In this section you can set the number of days after which the invitations and unverified accounts will expire. For that purpose you use <span style="font-family: courier new;">TempInvitation</span> and <span style="font-family: courier new;">TempVerification</span> parameters respectively. When the value is set to 0, data is not expired. Deletion of old data is actually done by the <span style="font-family: courier new;">deleteExpiredData.php</span> script.<br /><br /><br /><strong>Section <span style="font-family: courier new;">[EZPDO]</span>:</strong><br /><br />&nbsp;&nbsp;&nbsp;&nbsp;You don't need to modify this section unless you want to move EZPDO directory somewhere else, or you already have it somewhere on your system. In that case you should customize <span style="font-family: courier new;">RelativePath</span> parameter and make it point wherever you want. Just keep in mind that it is relative path, so keep the starting <span style="font-family: courier new;">./</span> and omit the trailing slash.</div>
<br />
<strong>6. Set up cron to run <span style="font-family: courier new;">deleteExpiredData.php</span> once a day</strong><br />
<div style="padding-left: 30px;">
Instructions for this step are different on each hosting environment. If you don't know how to set up scheduler to run the script in regular intervals, the best would be to ask your hosting provider for help.</div>
<br />
<strong>That should be it!</strong> You are ready to start using PHP Authentication web service. Continue by checking the <a href="https://www.blogger.com/2009/06/api.html">API</a>.